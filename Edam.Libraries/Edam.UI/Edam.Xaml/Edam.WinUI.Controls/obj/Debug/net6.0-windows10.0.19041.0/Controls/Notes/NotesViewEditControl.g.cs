#pragma checksum "C:\prjs\Datovy.Edam\Edam.Libraries\Edam.UI\Edam.Xaml\Edam.WinUI.Controls\Controls\Notes\NotesViewEditControl.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "64DA68C1C6752483D07DE817B20A1E2A43A25AD559E2701F54FBD7445E47F0BD"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Edam.WinUI.Controls.Notes
{
    partial class NotesViewEditControl : 
        global::Microsoft.UI.Xaml.Controls.UserControl, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_UIElement_Visibility(global::Microsoft.UI.Xaml.UIElement obj, global::Microsoft.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(global::Microsoft.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Microsoft.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Primitives_Selector_SelectedItem(global::Microsoft.UI.Xaml.Controls.Primitives.Selector obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_DatePicker_Date(global::Microsoft.UI.Xaml.Controls.DatePicker obj, global::System.DateTimeOffset value)
            {
                obj.Date = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(global::Microsoft.UI.Xaml.Controls.Primitives.Selector obj, global::System.Int32 value)
            {
                obj.SelectedIndex = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TextBox_Text(global::Microsoft.UI.Xaml.Controls.TextBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class NotesViewEditControl_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            INotesViewEditControl_Bindings
        {
            private global::Edam.WinUI.Controls.Notes.NotesViewEditControl dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.StackPanel obj4;
            private global::CommunityToolkit.WinUI.UI.Controls.DockPanel obj5;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj6;
            private global::Microsoft.UI.Xaml.Controls.ListView obj7;
            private global::Microsoft.UI.Xaml.Controls.Button obj8;
            private global::Microsoft.UI.Xaml.Controls.DatePicker obj9;
            private global::Microsoft.UI.Xaml.Controls.ComboBox obj10;
            private global::Microsoft.UI.Xaml.Controls.TextBox obj11;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj12;
            private global::Microsoft.UI.Xaml.Controls.Button obj13;
            private global::Microsoft.UI.Xaml.Controls.Button obj14;
            private global::Microsoft.UI.Xaml.Controls.Button obj15;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj4VisibilityDisabled = false;
            private static bool isobj5VisibilityDisabled = false;
            private static bool isobj6TextDisabled = false;
            private static bool isobj7ItemsSourceDisabled = false;
            private static bool isobj7SelectedItemDisabled = false;
            private static bool isobj8CommandDisabled = false;
            private static bool isobj8VisibilityDisabled = false;
            private static bool isobj9DateDisabled = false;
            private static bool isobj10ItemsSourceDisabled = false;
            private static bool isobj10SelectedIndexDisabled = false;
            private static bool isobj11TextDisabled = false;
            private static bool isobj12TextDisabled = false;
            private static bool isobj12VisibilityDisabled = false;
            private static bool isobj13CommandDisabled = false;
            private static bool isobj14CommandDisabled = false;
            private static bool isobj14VisibilityDisabled = false;
            private static bool isobj15CommandDisabled = false;

            private NotesViewEditControl_obj1_BindingsTracking bindingsTracking;

            public NotesViewEditControl_obj1_Bindings()
            {
                this.bindingsTracking = new NotesViewEditControl_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 46 && columnNumber == 32)
                {
                    isobj4VisibilityDisabled = true;
                }
                else if (lineNumber == 77 && columnNumber == 34)
                {
                    isobj5VisibilityDisabled = true;
                }
                else if (lineNumber == 87 && columnNumber == 13)
                {
                    isobj6TextDisabled = true;
                }
                else if (lineNumber == 94 && columnNumber == 13)
                {
                    isobj7ItemsSourceDisabled = true;
                }
                else if (lineNumber == 95 && columnNumber == 13)
                {
                    isobj7SelectedItemDisabled = true;
                }
                else if (lineNumber == 81 && columnNumber == 16)
                {
                    isobj8CommandDisabled = true;
                }
                else if (lineNumber == 83 && columnNumber == 16)
                {
                    isobj8VisibilityDisabled = true;
                }
                else if (lineNumber == 56 && columnNumber == 22)
                {
                    isobj9DateDisabled = true;
                }
                else if (lineNumber == 60 && columnNumber == 13)
                {
                    isobj10ItemsSourceDisabled = true;
                }
                else if (lineNumber == 61 && columnNumber == 13)
                {
                    isobj10SelectedIndexDisabled = true;
                }
                else if (lineNumber == 67 && columnNumber == 13)
                {
                    isobj11TextDisabled = true;
                }
                else if (lineNumber == 73 && columnNumber == 13)
                {
                    isobj12TextDisabled = true;
                }
                else if (lineNumber == 74 && columnNumber == 13)
                {
                    isobj12VisibilityDisabled = true;
                }
                else if (lineNumber == 48 && columnNumber == 21)
                {
                    isobj13CommandDisabled = true;
                }
                else if (lineNumber == 51 && columnNumber == 16)
                {
                    isobj14CommandDisabled = true;
                }
                else if (lineNumber == 53 && columnNumber == 16)
                {
                    isobj14VisibilityDisabled = true;
                }
                else if (lineNumber == 54 && columnNumber == 21)
                {
                    isobj15CommandDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 4: // Controls\Notes\NotesViewEditControl.xaml line 46
                        this.obj4 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.StackPanel>(target);
                        this.bindingsTracking.RegisterTwoWayListener_4(this.obj4);
                        break;
                    case 5: // Controls\Notes\NotesViewEditControl.xaml line 77
                        this.obj5 = global::WinRT.CastExtensions.As<global::CommunityToolkit.WinUI.UI.Controls.DockPanel>(target);
                        this.bindingsTracking.RegisterTwoWayListener_5(this.obj5);
                        break;
                    case 6: // Controls\Notes\NotesViewEditControl.xaml line 86
                        this.obj6 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        this.bindingsTracking.RegisterTwoWayListener_6(this.obj6);
                        break;
                    case 7: // Controls\Notes\NotesViewEditControl.xaml line 89
                        this.obj7 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                        this.bindingsTracking.RegisterTwoWayListener_7(this.obj7);
                        break;
                    case 8: // Controls\Notes\NotesViewEditControl.xaml line 80
                        this.obj8 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        this.bindingsTracking.RegisterTwoWayListener_8(this.obj8);
                        break;
                    case 9: // Controls\Notes\NotesViewEditControl.xaml line 56
                        this.obj9 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.DatePicker>(target);
                        this.bindingsTracking.RegisterTwoWayListener_9(this.obj9);
                        break;
                    case 10: // Controls\Notes\NotesViewEditControl.xaml line 57
                        this.obj10 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_10(this.obj10);
                        break;
                    case 11: // Controls\Notes\NotesViewEditControl.xaml line 64
                        this.obj11 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_11(this.obj11);
                        break;
                    case 12: // Controls\Notes\NotesViewEditControl.xaml line 69
                        this.obj12 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        this.bindingsTracking.RegisterTwoWayListener_12(this.obj12);
                        break;
                    case 13: // Controls\Notes\NotesViewEditControl.xaml line 48
                        this.obj13 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 14: // Controls\Notes\NotesViewEditControl.xaml line 49
                        this.obj14 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 15: // Controls\Notes\NotesViewEditControl.xaml line 54
                        this.obj15 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // INotesViewEditControl_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::Edam.WinUI.Controls.Notes.NotesViewEditControl>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Edam.WinUI.Controls.Notes.NotesViewEditControl obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::Edam.UI.DataModel.Notes.NoteViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_InEditor(obj.InEditor, phase);
                        this.Update_ViewModel_InSearch(obj.InSearch, phase);
                        this.Update_ViewModel_TotalNotesText(obj.TotalNotesText, phase);
                        this.Update_ViewModel_Items(obj.Items, phase);
                        this.Update_ViewModel_SelectedItem(obj.SelectedItem, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_AddCommand(obj.AddCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_HasReferenceId(obj.HasReferenceId, phase);
                        this.Update_ViewModel_TypeModel(obj.TypeModel, phase);
                        this.Update_ViewModel_StatusMessageText(obj.StatusMessageText, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_SaveCommand(obj.SaveCommand, phase);
                        this.Update_ViewModel_DeleteCommand(obj.DeleteCommand, phase);
                        this.Update_ViewModel_NotAdding(obj.NotAdding, phase);
                        this.Update_ViewModel_DoneEditCommand(obj.DoneEditCommand, phase);
                    }
                }
            }
            private void Update_ViewModel_InEditor(global::Microsoft.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\Notes\NotesViewEditControl.xaml line 46
                    if (!isobj4VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj4, obj);
                    }
                }
            }
            private void Update_ViewModel_InSearch(global::Microsoft.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\Notes\NotesViewEditControl.xaml line 77
                    if (!isobj5VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj5, obj);
                    }
                    // Controls\Notes\NotesViewEditControl.xaml line 69
                    if (!isobj12VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj12, obj);
                    }
                }
            }
            private void Update_ViewModel_TotalNotesText(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\Notes\NotesViewEditControl.xaml line 86
                    if (!isobj6TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj6, obj, null);
                    }
                }
            }
            private void Update_ViewModel_Items(global::System.Collections.ObjectModel.ObservableCollection<global::Edam.UI.DataModel.Notes.NoteModel> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_Items(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\Notes\NotesViewEditControl.xaml line 89
                    if (!isobj7ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj7, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SelectedItem(global::Edam.UI.DataModel.Notes.NoteModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_SelectedItem(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_SelectedItem_ReferenceDateOffset(obj.ReferenceDateOffset, phase);
                        this.Update_ViewModel_SelectedItem_NoteText(obj.NoteText, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\Notes\NotesViewEditControl.xaml line 89
                    if (!isobj7SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj7, obj, null);
                    }
                }
            }
            private void Update_ViewModel_AddCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Controls\Notes\NotesViewEditControl.xaml line 80
                    if (!isobj8CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj8, obj, null);
                    }
                }
            }
            private void Update_ViewModel_HasReferenceId(global::Microsoft.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\Notes\NotesViewEditControl.xaml line 80
                    if (!isobj8VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj8, obj);
                    }
                }
            }
            private void Update_ViewModel_SelectedItem_ReferenceDateOffset(global::System.DateTimeOffset obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\Notes\NotesViewEditControl.xaml line 56
                    if (!isobj9DateDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_DatePicker_Date(this.obj9, obj);
                    }
                }
            }
            private void Update_ViewModel_TypeModel(global::Edam.UI.DataModel.Notes.NoteTypeViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_TypeModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_TypeModel_NoteTypes(obj.NoteTypes, phase);
                        this.Update_ViewModel_TypeModel_SelectedNoteTypeIndex(obj.SelectedNoteTypeIndex, phase);
                    }
                }
            }
            private void Update_ViewModel_TypeModel_NoteTypes(global::System.Collections.ObjectModel.ObservableCollection<global::Edam.DataObjects.DataCodes.DataCodeInfo> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_TypeModel_NoteTypes(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\Notes\NotesViewEditControl.xaml line 57
                    if (!isobj10ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj10, obj, null);
                    }
                }
            }
            private void Update_ViewModel_TypeModel_SelectedNoteTypeIndex(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\Notes\NotesViewEditControl.xaml line 57
                    if (!isobj10SelectedIndexDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj10, obj);
                    }
                }
            }
            private void Update_ViewModel_SelectedItem_NoteText(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\Notes\NotesViewEditControl.xaml line 64
                    if (!isobj11TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBox_Text(this.obj11, obj, null);
                    }
                }
            }
            private void Update_ViewModel_StatusMessageText(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\Notes\NotesViewEditControl.xaml line 69
                    if (!isobj12TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj12, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SaveCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Controls\Notes\NotesViewEditControl.xaml line 48
                    if (!isobj13CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj13, obj, null);
                    }
                }
            }
            private void Update_ViewModel_DeleteCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Controls\Notes\NotesViewEditControl.xaml line 49
                    if (!isobj14CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj14, obj, null);
                    }
                }
            }
            private void Update_ViewModel_NotAdding(global::Microsoft.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Controls\Notes\NotesViewEditControl.xaml line 49
                    if (!isobj14VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj14, obj);
                    }
                }
            }
            private void Update_ViewModel_DoneEditCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Controls\Notes\NotesViewEditControl.xaml line 54
                    if (!isobj15CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj15, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_4_Visibility()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.InEditor = this.obj4.Visibility;
                        }
                    }
                }
            }
            private void UpdateTwoWay_5_Visibility()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.InSearch = this.obj5.Visibility;
                        }
                    }
                }
            }
            private void UpdateTwoWay_6_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.TotalNotesText = this.obj6.Text;
                        }
                    }
                }
            }
            private void UpdateTwoWay_7_ItemsSource()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.Items = (global::System.Collections.ObjectModel.ObservableCollection<global::Edam.UI.DataModel.Notes.NoteModel>)this.obj7.ItemsSource;
                        }
                    }
                }
            }
            private void UpdateTwoWay_7_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.SelectedItem = (global::Edam.UI.DataModel.Notes.NoteModel)this.obj7.SelectedItem;
                        }
                    }
                }
            }
            private void UpdateTwoWay_8_Visibility()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.HasReferenceId = this.obj8.Visibility;
                        }
                    }
                }
            }
            private void UpdateTwoWay_9_Date()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            if (this.dataRoot.ViewModel.SelectedItem != null)
                            {
                                this.dataRoot.ViewModel.SelectedItem.ReferenceDateOffset = this.obj9.Date;
                            }
                        }
                    }
                }
            }
            private void UpdateTwoWay_10_ItemsSource()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            if (this.dataRoot.ViewModel.TypeModel != null)
                            {
                                this.dataRoot.ViewModel.TypeModel.NoteTypes = (global::System.Collections.ObjectModel.ObservableCollection<global::Edam.DataObjects.DataCodes.DataCodeInfo>)this.obj10.ItemsSource;
                            }
                        }
                    }
                }
            }
            private void UpdateTwoWay_10_SelectedIndex()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            if (this.dataRoot.ViewModel.TypeModel != null)
                            {
                                this.dataRoot.ViewModel.TypeModel.SelectedNoteTypeIndex = this.obj10.SelectedIndex;
                            }
                        }
                    }
                }
            }
            private void UpdateTwoWay_11_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            if (this.dataRoot.ViewModel.SelectedItem != null)
                            {
                                this.dataRoot.ViewModel.SelectedItem.NoteText = this.obj11.Text;
                            }
                        }
                    }
                }
            }
            private void UpdateTwoWay_12_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.StatusMessageText = this.obj12.Text;
                        }
                    }
                }
            }
            private void UpdateTwoWay_12_Visibility()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.InSearch = this.obj12.Visibility;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class NotesViewEditControl_obj1_BindingsTracking
            {
                private global::System.WeakReference<NotesViewEditControl_obj1_Bindings> weakRefToBindingObj; 

                public NotesViewEditControl_obj1_BindingsTracking(NotesViewEditControl_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<NotesViewEditControl_obj1_Bindings>(obj);
                }

                public NotesViewEditControl_obj1_Bindings TryGetBindingObject()
                {
                    NotesViewEditControl_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_ViewModel_Items(null);
                    UpdateChildListeners_ViewModel_SelectedItem(null);
                    UpdateChildListeners_ViewModel_TypeModel(null);
                    UpdateChildListeners_ViewModel_TypeModel_NoteTypes(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    NotesViewEditControl_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Edam.UI.DataModel.Notes.NoteViewModel obj = sender as global::Edam.UI.DataModel.Notes.NoteViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_InEditor(obj.InEditor, DATA_CHANGED);
                                bindings.Update_ViewModel_InSearch(obj.InSearch, DATA_CHANGED);
                                bindings.Update_ViewModel_TotalNotesText(obj.TotalNotesText, DATA_CHANGED);
                                bindings.Update_ViewModel_Items(obj.Items, DATA_CHANGED);
                                bindings.Update_ViewModel_SelectedItem(obj.SelectedItem, DATA_CHANGED);
                                bindings.Update_ViewModel_HasReferenceId(obj.HasReferenceId, DATA_CHANGED);
                                bindings.Update_ViewModel_TypeModel(obj.TypeModel, DATA_CHANGED);
                                bindings.Update_ViewModel_StatusMessageText(obj.StatusMessageText, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "InEditor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_InEditor(obj.InEditor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "InSearch":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_InSearch(obj.InSearch, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TotalNotesText":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_TotalNotesText(obj.TotalNotesText, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Items":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Items(obj.Items, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedItem":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedItem(obj.SelectedItem, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "HasReferenceId":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_HasReferenceId(obj.HasReferenceId, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TypeModel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_TypeModel(obj.TypeModel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "StatusMessageText":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_StatusMessageText(obj.StatusMessageText, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Edam.UI.DataModel.Notes.NoteViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::Edam.UI.DataModel.Notes.NoteViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_Items(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    NotesViewEditControl_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Edam.UI.DataModel.Notes.NoteModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Edam.UI.DataModel.Notes.NoteModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_Items(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    NotesViewEditControl_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Edam.UI.DataModel.Notes.NoteModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Edam.UI.DataModel.Notes.NoteModel>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Edam.UI.DataModel.Notes.NoteModel> cache_ViewModel_Items = null;
                public void UpdateChildListeners_ViewModel_Items(global::System.Collections.ObjectModel.ObservableCollection<global::Edam.UI.DataModel.Notes.NoteModel> obj)
                {
                    if (obj != cache_ViewModel_Items)
                    {
                        if (cache_ViewModel_Items != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_Items).PropertyChanged -= PropertyChanged_ViewModel_Items;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_Items).CollectionChanged -= CollectionChanged_ViewModel_Items;
                            cache_ViewModel_Items = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_Items = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_Items;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_Items;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_SelectedItem(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    NotesViewEditControl_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Edam.UI.DataModel.Notes.NoteModel obj = sender as global::Edam.UI.DataModel.Notes.NoteModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_SelectedItem_ReferenceDateOffset(obj.ReferenceDateOffset, DATA_CHANGED);
                                bindings.Update_ViewModel_SelectedItem_NoteText(obj.NoteText, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "ReferenceDateOffset":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedItem_ReferenceDateOffset(obj.ReferenceDateOffset, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NoteText":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedItem_NoteText(obj.NoteText, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Edam.UI.DataModel.Notes.NoteModel cache_ViewModel_SelectedItem = null;
                public void UpdateChildListeners_ViewModel_SelectedItem(global::Edam.UI.DataModel.Notes.NoteModel obj)
                {
                    if (obj != cache_ViewModel_SelectedItem)
                    {
                        if (cache_ViewModel_SelectedItem != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_SelectedItem).PropertyChanged -= PropertyChanged_ViewModel_SelectedItem;
                            cache_ViewModel_SelectedItem = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_SelectedItem = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_SelectedItem;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_TypeModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    NotesViewEditControl_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Edam.UI.DataModel.Notes.NoteTypeViewModel obj = sender as global::Edam.UI.DataModel.Notes.NoteTypeViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_TypeModel_NoteTypes(obj.NoteTypes, DATA_CHANGED);
                                bindings.Update_ViewModel_TypeModel_SelectedNoteTypeIndex(obj.SelectedNoteTypeIndex, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "NoteTypes":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_TypeModel_NoteTypes(obj.NoteTypes, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedNoteTypeIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_TypeModel_SelectedNoteTypeIndex(obj.SelectedNoteTypeIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Edam.UI.DataModel.Notes.NoteTypeViewModel cache_ViewModel_TypeModel = null;
                public void UpdateChildListeners_ViewModel_TypeModel(global::Edam.UI.DataModel.Notes.NoteTypeViewModel obj)
                {
                    if (obj != cache_ViewModel_TypeModel)
                    {
                        if (cache_ViewModel_TypeModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_TypeModel).PropertyChanged -= PropertyChanged_ViewModel_TypeModel;
                            cache_ViewModel_TypeModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_TypeModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_TypeModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_TypeModel_NoteTypes(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    NotesViewEditControl_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Edam.DataObjects.DataCodes.DataCodeInfo> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Edam.DataObjects.DataCodes.DataCodeInfo>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_TypeModel_NoteTypes(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    NotesViewEditControl_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Edam.DataObjects.DataCodes.DataCodeInfo> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Edam.DataObjects.DataCodes.DataCodeInfo>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Edam.DataObjects.DataCodes.DataCodeInfo> cache_ViewModel_TypeModel_NoteTypes = null;
                public void UpdateChildListeners_ViewModel_TypeModel_NoteTypes(global::System.Collections.ObjectModel.ObservableCollection<global::Edam.DataObjects.DataCodes.DataCodeInfo> obj)
                {
                    if (obj != cache_ViewModel_TypeModel_NoteTypes)
                    {
                        if (cache_ViewModel_TypeModel_NoteTypes != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_TypeModel_NoteTypes).PropertyChanged -= PropertyChanged_ViewModel_TypeModel_NoteTypes;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_TypeModel_NoteTypes).CollectionChanged -= CollectionChanged_ViewModel_TypeModel_NoteTypes;
                            cache_ViewModel_TypeModel_NoteTypes = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_TypeModel_NoteTypes = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_TypeModel_NoteTypes;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_TypeModel_NoteTypes;
                        }
                    }
                }
                public void RegisterTwoWayListener_4(global::Microsoft.UI.Xaml.Controls.StackPanel sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.UIElement.VisibilityProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_4_Visibility();
                        }
                    });
                }
                public void RegisterTwoWayListener_5(global::CommunityToolkit.WinUI.UI.Controls.DockPanel sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.UIElement.VisibilityProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_5_Visibility();
                        }
                    });
                }
                public void RegisterTwoWayListener_6(global::Microsoft.UI.Xaml.Controls.TextBlock sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.TextBlock.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_6_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_7(global::Microsoft.UI.Xaml.Controls.ListView sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.ItemsControl.ItemsSourceProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_7_ItemsSource();
                        }
                    });
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_7_SelectedItem();
                        }
                    });
                }
                public void RegisterTwoWayListener_8(global::Microsoft.UI.Xaml.Controls.Button sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.UIElement.VisibilityProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_8_Visibility();
                        }
                    });
                }
                public void RegisterTwoWayListener_9(global::Microsoft.UI.Xaml.Controls.DatePicker sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.DatePicker.DateProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_9_Date();
                        }
                    });
                }
                public void RegisterTwoWayListener_10(global::Microsoft.UI.Xaml.Controls.ComboBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.ItemsControl.ItemsSourceProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_10_ItemsSource();
                        }
                    });
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_10_SelectedIndex();
                        }
                    });
                }
                public void RegisterTwoWayListener_11(global::Microsoft.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.LostFocus += (sender, e) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_11_Text();
                        }
                    };
                }
                public void RegisterTwoWayListener_12(global::Microsoft.UI.Xaml.Controls.TextBlock sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.TextBlock.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_12_Text();
                        }
                    });
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.UIElement.VisibilityProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_12_Visibility();
                        }
                    });
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 10: // Controls\Notes\NotesViewEditControl.xaml line 57
                {
                    global::Microsoft.UI.Xaml.Controls.ComboBox element10 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ComboBox)element10).SelectionChanged += this.ComboBox_SelectionChanged;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Controls\Notes\NotesViewEditControl.xaml line 1
                {                    
                    global::Microsoft.UI.Xaml.Controls.UserControl element1 = (global::Microsoft.UI.Xaml.Controls.UserControl)target;
                    NotesViewEditControl_obj1_Bindings bindings = new NotesViewEditControl_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

